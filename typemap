TYPEMAP
cpBool		T_IV
cpFloat		T_NV
cpBody *	O_OBJECT
cpConstraint *	O_OBJECT
cpShape *	O_OBJECT
cpSpace *	O_OBJECT
cpVect		O_OBJ_VECT
cpBB		O_OBJ_BB

INPUT

O_OBJECT
	if (sv_isobject($arg) && (SvTYPE(SvRV($arg)) == SVt_PVMG)) {
		$var = ($type)SvIV((SV *)SvRV($arg));
	} else if ($arg == 0) {
		XSRETURN(0);
	} else {
		XSRETURN_UNDEF;
	}

O_OBJ_VECT
	if (SvTYPE(SvRV($arg)) == SVt_PVAV) {
		AV *input = (AV *)SvRV($arg);
		if (av_len(input) != 1) {
			XSRETURN_UNDEF;
		}
		cpFloat x, y;
		x = (cpFloat)SvNV(*av_fetch(input, 0, 0));
		y = (cpFloat)SvNV(*av_fetch(input, 1, 0));
		$var = cpv(x, y);
	} else if ($arg == 0) {
		XSRETURN(0);
	} else {
		XSRETURN_UNDEF;
	}

O_OBJ_BB
	if (SvTYPE(SvRV($arg)) == SVt_PVAV) {
		AV *input = (AV *)SvRV($arg);
		if (av_len(input) != 3) {
			XSRETURN_UNDEF;
		}
		$var = cpBBNew(
			(cpFloat)SvNV(*av_fetch(input, 0, 0)),
			(cpFloat)SvNV(*av_fetch(input, 1, 0)),
			(cpFloat)SvNV(*av_fetch(input, 2, 0)),
			(cpFloat)SvNV(*av_fetch(input, 3, 0))
		);
	} else if ($arg == 0) {
		XSRETURN(0);
	} else {
		XSRETURN_UNDEF;
	}

OUTPUT

O_OBJECT
	if ($var) {
		sv_setref_pv($arg, CLASS, (void *)$var);
	} else {
		XSRETURN_UNDEF;
	}

O_OBJ_VECT
	AV *output = newAV();
	av_push(output, newSVnv($var.x));
	av_push(output, newSVnv($var.y));
	$arg = newRV_inc((SV *)output);

O_OBJ_BB
	AV *output = newAV();
	av_push(output, newSVnv($var.l));
	av_push(output, newSVnv($var.b));
	av_push(output, newSVnv($var.r));
	av_push(output, newSVnv($var.t));
	$arg = newRV_inc((SV *)output);
	load_module((U32)0, newSVpv(CLASS, 0), NULL, NULL);
	sv_bless($arg, gv_stashpv(CLASS, (I32)0));

